;
; File generated by cc65 v 2.19 - Git 5493c9e
;
	.fopt		compiler,"cc65 v 2.19 - Git 5493c9e"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_bankLevel
	.export		_bankBuffer
	.export		_banked_call
	.export		_bank_push
	.export		_bank_pop
	.import		_set_prg_8000
	.export		_irq_array
	.export		_double_buffer
	.export		_main

.segment	"RODATA"

.segment	"STARTUP"
.segment	"BANK0"
.segment	"BANK1"
.segment	"BANK2"
.segment	"BANK3"
.segment	"BANK4"
.segment	"BANK5"
.segment	"BANK6"
.segment	"BANK7"
.segment	"BANK8"
.segment	"BANK9"
.segment	"BANK10"
.segment	"BANK11"
.segment	"BANK12"
.segment	"BANK13"
.segment	"BANK14"
.segment	"BANK15"
.segment	"BANK16"
.segment	"BANK17"
.segment	"BANK18"
.segment	"BANK19"
.segment	"BANK20"
.segment	"BANK21"
.segment	"BANK22"
.segment	"BANK23"
.segment	"BANK24"
.segment	"BANK25"
.segment	"BANK26"
.segment	"BANK27"
.segment	"BANK28"
.segment	"BANK29"
.segment	"BANK30"
.segment	"BANK31"
.segment	"BANK32"
.segment	"BANK33"
.segment	"BANK34"
.segment	"BANK35"
.segment	"BANK36"
.segment	"BANK37"
.segment	"BANK38"
.segment	"BANK39"
.segment	"BANK40"
.segment	"BANK41"
.segment	"BANK42"
.segment	"BANK43"
.segment	"BANK44"
.segment	"BANK45"
.segment	"BANK46"
.segment	"BANK47"
.segment	"BANK48"
.segment	"BANK49"
.segment	"BANK50"
.segment	"BANK51"
.segment	"BANK52"
.segment	"BANK53"
.segment	"BANK54"
.segment	"BANK55"
.segment	"BANK56"
.segment	"BANK57"
.segment	"BANK58"
.segment	"BANK59"
.segment	"BANK60"
.segment	"CODE"

.segment	"BSS"

_bankLevel:
	.res	1,$00
_bankBuffer:
	.res	10,$00
_irq_array:
	.res	32,$00
_double_buffer:
	.res	32,$00

; ---------------------------------------------------------------
; void __near__ banked_call (unsigned char bankId, void (*method)(void))
; ---------------------------------------------------------------

.segment	"STARTUP"

.proc	_banked_call: near

.segment	"STARTUP"

;
; void banked_call(unsigned char bankId, void (*method)(void)) {
;
	jsr     pushax
;
; bank_push(bankId);
;
	ldy     #$02
	lda     (sp),y
	jsr     _bank_push
;
; (*method)();
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     callax
;
; bank_pop();
;
	jsr     _bank_pop
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ bank_push (unsigned char bankId)
; ---------------------------------------------------------------

.segment	"STARTUP"

.proc	_bank_push: near

.segment	"STARTUP"

;
; void bank_push(unsigned char bankId) {
;
	jsr     pusha
;
; bankBuffer[bankLevel] = bankId;
;
	ldy     #$00
	lda     (sp),y
	ldy     _bankLevel
	sta     _bankBuffer,y
;
; ++bankLevel;
;
	inc     _bankLevel
;
; set_prg_8000(bankId);
;
	ldy     #$00
	lda     (sp),y
	jsr     _set_prg_8000
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ bank_pop (void)
; ---------------------------------------------------------------

.segment	"STARTUP"

.proc	_bank_pop: near

.segment	"STARTUP"

;
; --bankLevel;
;
	dec     _bankLevel
;
; if (bankLevel > 0) {
;
	beq     L0002
;
; set_prg_8000(bankBuffer[bankLevel-1]);
;
	ldx     #$00
	lda     _bankLevel
	sec
	sbc     #$01
	bcs     L0003
	dex
L0003:	sta     ptr1
	txa
	clc
	adc     #>(_bankBuffer)
	sta     ptr1+1
	ldy     #<(_bankBuffer)
	lda     (ptr1),y
	jmp     _set_prg_8000
;
; }
;
L0002:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; while (1) {}
;
L0005:	jmp     L0005

.endproc

