MEMORY {
#RAM Addresses:
    # Zero page
    ZP: start = $00, size = $100, type = rw, define = yes;
	#note, the c compiler + neslib + famitone2 use about 60 zp addresses, I think
	
	#note OAM: start = $0200, size = $0100, define = yes;
	#note, sprites stored here in the RAM
	
	RAM: start = $0300, size = $0400, define = yes;
	#note, I located the c stack at 700-7ff, see below
	
	WRAM: start = $6000, size = $2000, define = yes;

#INES Header:
    HEADER: start = $0, size = $10, file = %O ,fill = yes;


#ROM Addresses:

    PRG0:  start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG1:  start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG2:  start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG3:  start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG4:  start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG5:  start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG6:  start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG7:  start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG8:  start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG9:  start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG10: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG11: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG12: start = $8000, size = $2000, file = %O, fill = yes, define = yes;

	PRG13: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG14: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG15: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG16: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG17: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG18: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG19: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG20: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG21: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG22: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG23: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG24: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG25: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG26: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG27: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG28: start = $8000, size = $2000, file = %O, fill = yes, define = yes;

	PRG29: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG30: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG31: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG32: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG33: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG34: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG35: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG36: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG37: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG38: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG39: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG40: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG41: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG42: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG43: start = $a000, size = $2000, file = %O, fill = yes, define = yes;

	PRG44: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG45: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG46: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG47: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG48: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG49: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG50: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG51: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG52: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG53: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG54: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG55: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG56: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG57: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG58: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG59: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG60: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG61: start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	
	PRG: start = $c000, size = $2000, file = %O ,fill = yes, define = yes;

	PRG63: start = $e000, size = $2000, file = %O ,fill = yes, define = yes;
# make sure the reset code is in e000-ffff, see below	



# 32 Banks of 8K CHR ROM
    CHR: start = $0000, size = $40000, file = %O, fill = yes;
}




SEGMENTS {
    HEADER:   load = HEADER,         type = ro;
    
# this needs to be in the fixed bank between e000 and ffff
    LOWCODE:  load = PRG,            type = ro,                optional = yes;
    INIT:     load = PRG,            type = ro,  define = yes, optional = yes;
    CODE:     load = PRG,            type = ro,  define = yes;
    RODATA:   load = PRG,            type = ro,  define = yes;
    DATA:     load = PRG, run = RAM, type = rw,  define = yes;
    CHARS:    load = CHR,            type = rw;
    BSS:      load = RAM,            type = bss, define = yes;
    HEAP:     load = RAM,            type = bss, optional = yes;
    ZEROPAGE: load = ZP,             type = zp;
    ONCE:     load = PRG,            type = ro,  define = yes;
	
	XRAM:	  load = WRAM,			 type = bss, define = yes;
	
	BANK0:     load = PRG0,            type = ro, define = yes;
	BANK1:     load = PRG1,            type = ro, define = yes;
	BANK2:     load = PRG2,            type = ro, define = yes;
	BANK3:     load = PRG3,            type = ro, define = yes;
	BANK4:     load = PRG4,            type = ro, define = yes;
	BANK5:     load = PRG5,            type = ro, define = yes;
	BANK6:     load = PRG6,            type = ro, define = yes;
	BANK7:     load = PRG7,            type = ro, define = yes;
	BANK8:     load = PRG8,            type = ro, define = yes;
	BANK9:     load = PRG9,            type = ro, define = yes;
	BANK10:    load = PRG10,           type = ro, define = yes;
	BANK11:    load = PRG11,           type = ro, define = yes;
	BANK12:    load = PRG12,           type = ro, define = yes;
	BANK13:    load = PRG13,           type = ro, define = yes;
	BANK14:    load = PRG14,           type = ro, define = yes;
	BANK15:    load = PRG15,           type = ro, define = yes;
	BANK16:    load = PRG16,           type = ro, define = yes;
	BANK17:    load = PRG17,           type = ro, define = yes;
	BANK18:    load = PRG18,           type = ro, define = yes;
	BANK19:    load = PRG19,           type = ro, define = yes;
	BANK20:    load = PRG20,           type = ro, define = yes;
	BANK21:    load = PRG21,           type = ro, define = yes;
	BANK22:    load = PRG22,           type = ro, define = yes;
	BANK23:    load = PRG23,           type = ro, define = yes;
	BANK24:    load = PRG24,           type = ro, define = yes;
	BANK25:    load = PRG25,           type = ro, define = yes;
	BANK26:    load = PRG26,           type = ro, define = yes;
	BANK27:    load = PRG27,           type = ro, define = yes;
	BANK28:    load = PRG28,           type = ro, define = yes;
	BANK29:    load = PRG29,           type = ro, define = yes;
	BANK30:    load = PRG30,           type = ro, define = yes;
	BANK31:    load = PRG31,           type = ro, define = yes;
	BANK32:    load = PRG32,           type = ro, define = yes;
	BANK33:    load = PRG33,           type = ro, define = yes;
	BANK34:    load = PRG34,           type = ro, define = yes;
	BANK35:    load = PRG35,           type = ro, define = yes;
	BANK36:    load = PRG36,           type = ro, define = yes;
	BANK37:    load = PRG37,           type = ro, define = yes;
	BANK38:    load = PRG38,           type = ro, define = yes;
	BANK39:    load = PRG39,           type = ro, define = yes;
	BANK40:    load = PRG40,           type = ro, define = yes;
	BANK41:    load = PRG41,           type = ro, define = yes;
	BANK42:    load = PRG42,           type = ro, define = yes;
	BANK43:    load = PRG43,           type = ro, define = yes;
	BANK44:    load = PRG44,           type = ro, define = yes;
	BANK45:    load = PRG45,           type = ro, define = yes;
	BANK46:    load = PRG46,           type = ro, define = yes;
	BANK47:    load = PRG47,           type = ro, define = yes;
	BANK48:    load = PRG48,           type = ro, define = yes;
	BANK49:    load = PRG49,           type = ro, define = yes;
	BANK50:    load = PRG50,           type = ro, define = yes;
	BANK51:    load = PRG51,           type = ro, define = yes;
	BANK52:    load = PRG52,           type = ro, define = yes;
	BANK53:    load = PRG53,           type = ro, define = yes;
	BANK54:    load = PRG54,           type = ro, define = yes;
	BANK55:    load = PRG55,           type = ro, define = yes;
	BANK56:    load = PRG56,           type = ro, define = yes;
	BANK57:    load = PRG57,           type = ro, define = yes;
	BANK58:    load = PRG58,           type = ro, define = yes;
	BANK59:    load = PRG59,           type = ro, define = yes;
	BANK60:    load = PRG60,           type = ro, define = yes;
	BANK61:    load = PRG61,           type = ro, define = yes;

	STARTUP:  load = PRG63,          type = ro, define = yes;
	# needs to be in the e000-ffff fixed bank
	
	# SAMPLES:  load = PRG, start = $f000, type = ro;
	VECTORS:  load = PRG63, start = $fffa, type = ro;
}




FEATURES {
    CONDES: segment = INIT,
        type = constructor,
        label = __CONSTRUCTOR_TABLE__,
        count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
        type = destructor,
        label = __DESTRUCTOR_TABLE__,
        count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
        segment = RODATA,
        label = __INTERRUPTOR_TABLE__,
        count = __INTERRUPTOR_COUNT__;
}




SYMBOLS {

    __STACKSIZE__: type = weak, value = $0100;     # 1 page stack
	__STACK_START__: type = weak, value = $0700;
	
	NES_MAPPER:	  type = weak, value = 4; 			# mapper number, 4 = mmc3, txrom
	NES_PRG_BANKS:	 type = weak,  value = 32; 			# number of 16K PRG banks, = 512k
	NES_CHR_BANKS:	  type = weak, value = 32; 			# number of 8K CHR banks, = 256k
	NES_MIRRORING:	  type = weak, value = 8; 			# 0 horizontal, 1 vertical, 8 four screen, mmc3 can switch mirroring
	
}